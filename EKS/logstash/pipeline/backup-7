input {
  http {
    port => 5044
    codec => "plain"
  }
}

filter {
  # Parse para todas as requisições
  grok {
    match => { 
      "message" => "%{IPORHOST:clientip} - %{USER:username} \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response} (?:-|%{NUMBER:bytes}) %{QS:referrer} %{QS:agent} \[USER_ROLE:%{WORD:user_role}\] %{GREEDYDATA:event_info}"
    }
  }
  
  # DETECÇÃO ESPECÍFICA PARA TAINACAN
  if [request] =~ "/collection/" or [request] =~ "/tainacan/" {
    mutate {
      add_field => { 
        "platform" => "tainacan"
        "content_category" => "file"
        "event_type" => "file_access"
      }
    }
    
    # Extrair informações do Tainacan
    if [request] =~ "/item/(\d+)" {
      grok {
        match => { 
          "request" => ".*/item/%{NUMBER:tainacan_item_id}.*" 
        }
      }
    }
    
    # Determinar tipo de arquivo baseado na URL do Tainacan
    if [request] =~ "/document/" {
      mutate {
        add_field => { 
          "file_extension" => "pdf"
          "file_type" => "document"
        }
      }
    } else if [request] =~ "/image/" {
      mutate {
        add_field => { 
          "file_extension" => "jpg"
          "file_type" => "image" 
        }
      }
    } else if [request] =~ "/audio/" {
      mutate {
        add_field => { 
          "file_extension" => "mp3"
          "file_type" => "audio"
        }
      }
    } else if [request] =~ "/video/" {
      mutate {
        add_field => { 
          "file_extension" => "mp4"
          "file_type" => "video"
        }
      }
    } else {
      mutate {
        add_field => { 
          "file_extension" => "pdf"
          "file_type" => "document"
        }
      }
    }
  }
  
  # PROCESSAMENTO NORMAL PARA ARQUIVOS (não Tainacan)
  else if [event_info] =~ /\[FILE:([^:]+):([^:]+):([^\]]+)\]/ {
    grok {
      match => { 
        "event_info" => "\[FILE:%{WORD:file_type}:%{WORD:file_extension}:%{DATA:file_size}\]" 
      }
    }
    mutate {
      add_field => { 
        "content_category" => "file"
        "event_type" => "file_access"
      }
      convert => { 
        "file_type" => "string"
        "file_extension" => "string"
      }
    }
  } 
  
  # PÁGINAS (não arquivos)
  else if [event_info] =~ /\[PAGE:([^\]]+)\]/ {
    grok {
      match => { 
        "event_info" => "\[PAGE:%{WORD:page_type}\]" 
      }
    }
    mutate {
      add_field => { 
        "content_category" => "page" 
        "event_type" => "page_view"
      }
      convert => { "page_type" => "string" }
    }
  }
  
  # AGRUPAR EXTENSÕES EM CATEGORIAS SIMPLIFICADAS
  if [file_extension] {
    if [file_extension] in ["jpg", "jpeg", "png", "gif", "webp", "svg", "bmp", "ico", "tiff"] {
      mutate { add_field => { "content_group" => "image" } }
    } else if [file_extension] in ["mp3", "wav", "ogg", "m4a", "aac", "flac"] {
      mutate { add_field => { "content_group" => "audio" } }
    } else if [file_extension] in ["mp4", "avi", "mov", "wmv", "flv", "webm", "mkv"] {
      mutate { add_field => { "content_group" => "video" } }
    } else if [file_extension] == "pdf" {
      mutate { add_field => { "content_group" => "pdf" } }
    } else if [file_extension] in ["doc", "docx", "txt"] {
      mutate { add_field => { "content_group" => "document" } }
    } else if [file_extension] in ["xls", "xlsx", "csv"] {
      mutate { add_field => { "content_group" => "spreadsheet" } }
    } else if [file_extension] in ["ppt", "pptx"] {
      mutate { add_field => { "content_group" => "presentation" } }
    } else if [file_extension] in ["zip", "rar", "7z", "tar", "gz"] {
      mutate { add_field => { "content_group" => "archive" } }
    } else {
      mutate { add_field => { "content_group" => "other" } }
    }
  } else {
    mutate { add_field => { "content_group" => "webpage" } }
  }
  
  # Converter campos importantes
  mutate {
    convert => { 
      "verb" => "string"
      "user_role" => "string"
      "request" => "string"
    }
  }
  
  # Parse timestamp
  date {
    match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    locale => "en"
  }
  
  # GeoIP
  geoip {
    source => "clientip"
    target => "geoip"
  }
  
  # User Agent
  useragent {
    source => "agent"
    target => "user_agent"
  }
  
  # Limpeza de campos
  mutate {
    remove_field => [
      "event", 
      "http.request.body", 
      "http.request.mime_type",
      "http.version",
      "http.method",
      "url.path", 
      "url.domain", 
      "url.port",
      "host.ip",
      "event_info"
    ]
  }
}

output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "wordpress-logs-%{+YYYY.MM.dd}"
    template => "/usr/share/logstash/templates/wordpress-template.json"
    template_name => "wordpress-logs"
    template_overwrite => true
  }
  
  stdout { 
    codec => rubydebug 
  }
}